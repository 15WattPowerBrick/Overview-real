generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("ALTERNATIVE_DATABASE_URL")
}

model Assign {
  candidateCuid  String
  consultantCuid String
  projectCuid    String
  startDate      DateTime
  endDate        DateTime
  employmentType EmploymentType
  employeeId     String         @default("")
  restDay        Days           @default(SUN)
  Candidate      Candidate      @relation(fields: [candidateCuid], references: [cuid])
  Consultant     Consultant     @relation(fields: [consultantCuid], references: [cuid])
  Project        Project        @relation(fields: [projectCuid], references: [cuid])
  Requests       Request[]

  @@id([projectCuid, candidateCuid])
}

model Request {
  cuid          String        @id @default(cuid())
  candidateCuid String
  projectCuid   String
  data          Json
  type          RequestType
  status        RequestStatus @default(PENDING)
  createdAt     DateTime      @default(now())
  Assign        Assign        @relation(fields: [projectCuid, candidateCuid], references: [projectCuid, candidateCuid])
  Attendance    Attendance[]  @relation("AttendanceToRequest")
}

model Attendance {
  cuid          String            @id @default(cuid())
  candidateCuid String
  shiftCuid     String
  clockInTime   DateTime?
  clockOutTime  DateTime?
  status        AttendanceStatus?
  leave         LeaveStatus?
  shiftDate     DateTime
  shiftType     ShiftType         @default(FULL_DAY)
  postalCode    String?
  Candidate     Candidate         @relation(fields: [candidateCuid], references: [cuid])
  Shift         Shift             @relation(fields: [shiftCuid], references: [cuid])
  Request       Request[]         @relation("AttendanceToRequest")

  @@unique([candidateCuid, shiftCuid, shiftDate])
}

model Candidate {
  cuid             String          @id @default(cuid())
  nric             String          @unique @db.VarChar(9)
  contact          String
  name             String
  dateOfBirth      DateTime        @db.Date
  hasOnboarded     Boolean         @default(false)
  nationality      String?
  residency        ResidencyStatus
  bankDetails      Json?
  address          Json?
  emergencyContact Json?
  createdAt        DateTime        @default(now())
  Assign           Assign[]
  Attendance       Attendance[]
  User             User?
}

model Client {
  uen     String    @id
  name    String    @unique
  Project Project[]
}

model Consultant {
  cuid         String           @id @default(cuid())
  email        String           @unique
  name         String
  status       EmploymentStatus @default(ACTIVE)
  contact      String?          @unique
  designation  String
  registration String?          @unique
  department   String?
  permissions  Json             @default("{}")
  Assign       Assign[]
  Manage       Manage[]
}

model Manage {
  role           Role       @default(CLIENT_HOLDER)
  consultantCuid String
  projectCuid    String
  Consultant     Consultant @relation(fields: [consultantCuid], references: [cuid])
  Project        Project    @relation(fields: [projectCuid], references: [cuid])

  @@id([consultantCuid, projectCuid])
}

model Project {
  cuid                 String           @id @default(cuid())
  name                 String
  clientUEN            String
  employmentBy         String
  locations            Json[]           @default([])
  createdAt            DateTime         @default(now())
  endDate              DateTime
  startDate            DateTime
  noticePeriodDuration Int
  noticePeriodUnit     NoticePeriodUnit
  status               ProjectStatus    @default(ACTIVE)
  distanceRadius       Int              @default(50)
  timeWindow           Int              @default(15)
  Assign               Assign[]
  Manage               Manage[]
  Client               Client           @relation(fields: [clientUEN], references: [uen])
  Shift                Shift[]
}

model Session {
  sid    String   @id(map: "session_pkey") @db.VarChar
  sess   Json     @db.Json
  expire DateTime @db.Timestamp(6)

  @@index([expire], map: "IDX_session_expire")
}

model Shift {
  cuid             String       @id @default(cuid())
  projectCuid      String
  startTime        DateTime
  endTime          DateTime
  halfDayStartTime DateTime?
  halfDayEndTime   DateTime?
  breakDuration    Int          @default(0)
  status           ShiftStatus  @default(ACTIVE)
  Attendance       Attendance[]
  Project          Project      @relation(fields: [projectCuid], references: [cuid])
}

model User {
  cuid      String    @id @default(cuid())
  username  String    @unique
  hash      String
  Candidate Candidate @relation(fields: [cuid], references: [cuid])
}

model PublicHoliday {
  date      DateTime @id
  name      String
  createdAt DateTime @default(now())
}

enum RequestType {
  CLAIM
  PAID_LEAVE
  UNPAID_LEAVE
  RESIGNATION
  MEDICAL_LEAVE
}

enum AttendanceStatus {
  ON_TIME
  LATE
  NO_SHOW
  MEDICAL
}

enum LeaveStatus {
  FULLDAY
  HALFDAY
}

enum EmploymentType {
  PART_TIME
  FULL_TIME
  CONTRACT
}

enum ShiftType {
  FULL_DAY
  FIRST_HALF
  SECOND_HALF
}

enum EmploymentStatus {
  ACTIVE
  TERMINATED
}

enum ShiftStatus {
  ACTIVE
  ARCHIVED
}

enum ProjectStatus {
  ACTIVE
  EXPIRED
  DELETED
}

enum Role {
  CLIENT_HOLDER
  CANDIDATE_HOLDER
}

enum NoticePeriodUnit {
  DAY
  WEEK
  MONTH
}

enum RequestStatus {
  APPROVED
  REJECTED
  PENDING
  CANCELLED
}

enum ResidencyStatus {
  CITIZEN
  PERMANENT_RESIDENT
  WORK_PERMIT
  S_PASS
}

enum Days {
  MON
  TUE
  WEB
  THU
  FRI
  SAT
  SUN
}
