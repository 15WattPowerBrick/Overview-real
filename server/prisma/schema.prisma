generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Assign {
  candidateNric   String     @db.VarChar(9)
  consultantEmail String
  projectId       String
  Candidate       Candidate  @relation(fields: [candidateNric], references: [nric])
  Consultant      Consultant @relation(fields: [consultantEmail], references: [email])
  Project         Project    @relation(fields: [projectId], references: [id])

  @@id([consultantEmail, projectId, candidateNric])
}

model Attendance {
  id            String           @id
  candidateNric String           @db.VarChar(9)
  shiftId       String
  clockInTime   DateTime
  clockOutTime  DateTime
  status        AttendanceStatus
}

model Candidate {
  nric           String    @id @db.VarChar(9)
  name           String
  block          String
  building       String
  floor          String
  unit           String
  street         String
  postal         String    @db.VarChar(6)
  country        String
  bankHolderName String?
  bankName       String?
  bankNumber     String?
  dateOfBirth    DateTime?
  phoneNumber    String
  Assign         Assign[]
}

model Client {
  id      String    @id @default(cuid())
  name    String    @unique
  Project Project[]
}

model Consultant {
  email        String           @id
  name         String
  contact      String?          @unique
  status       EmploymentStatus @default(ACTIVE)
  designation  String
  registration String?          @unique
  department   String
  permissions  Json             @default("{}")
  Assign       Assign[]
  Manage       Manage[]
}

model Manage {
  role            Role       @default(CLIENT_HOLDER)
  consultantEmail String
  projectId       String
  Consultant      Consultant @relation(fields: [consultantEmail], references: [email])
  Project         Project    @relation(fields: [projectId], references: [id])

  @@id([consultantEmail, projectId])
}

model Project {
  id             String        @id @default(cuid())
  name           String
  clientId       String
  locations      Json
  createdAt      DateTime      @default(now())
  endDate        DateTime
  startDate      DateTime
  oldReferenceId String?
  employmentBy   MCICompany
  status         ProjectStatus
  Assign         Assign[]
  Manage         Manage[]
  Client         Client        @relation(fields: [clientId], references: [id])
  Shift          Shift[]
}

model Shift {
  id          String    @id @default(cuid())
  headcount   Int
  day         DayOfWeek
  endTime     DateTime
  projectId   String
  shiftNumber Int
  startTime   DateTime
  Project     Project   @relation(fields: [projectId], references: [id])
}

model Session {
  sid    String   @id(map: "session_pkey") @db.VarChar
  sess   Json     @db.Json
  expire DateTime @db.Timestamp(6)

  @@index([expire], map: "IDX_session_expire")
}

model User {
  username String @id
  hash     String
}

enum AttendanceStatus {
  PRESENT
  NO_SHOW
  MC
  FULL_DAY_LEAVE
  HALF_DAY_LEAVE
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum EmploymentStatus {
  ACTIVE
  TERMINATED
}

enum ProjectStatus {
  ACTIVE
  EXPIRED
  DELETED
}

enum Role {
  CLIENT_HOLDER
  CANDIDATE_HOLDER
}

enum MCICompany {
  MCI_CAREER_SERVICES
  MCI_OUTSOURCING
}
