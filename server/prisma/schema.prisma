generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Assign {
  candidateNric   String     @db.VarChar(9)
  consultantEmail String
  projectId       String
  Candidate       Candidate  @relation(fields: [candidateNric], references: [nric])
  Consultant      Consultant @relation(fields: [consultantEmail], references: [email])
  Project         Project    @relation(fields: [projectId], references: [id])

  @@id([projectId, candidateNric])
}

model Attendance {
  id            String            @id @default(cuid())
  candidateNric String
  shiftId       String
  shiftDate     DateTime
  clockInTime   DateTime?
  clockOutTime  DateTime?
  status        AttendanceStatus?
  Candidate     Candidate         @relation(fields: [candidateNric], references: [nric])
  Shift         Shift             @relation(fields: [shiftId], references: [id])
}

model Candidate {
  nric             String       @id @db.VarChar(9)
  phoneNumber      String       @unique
  name             String
  hasOnboarded     Boolean      @default(false)
  nationality      String?
  dateOfBirth      DateTime?
  bankDetails      Json?
  address          Json?
  emergencyContact Json?
  Assign           Assign[]
  Attendance       Attendance[]
  User             User?
}

model Client {
  UEN     String    @id
  name    String    @unique
  Project Project[]
}

model Consultant {
  email        String           @id
  name         String
  contact      String?          @unique
  status       EmploymentStatus @default(ACTIVE)
  designation  String
  registration String?          @unique
  department   String
  permissions  Json             @default("{}")
  Assign       Assign[]
  Manage       Manage[]
}

model Manage {
  role            Role       @default(CLIENT_HOLDER)
  consultantEmail String
  projectId       String
  Consultant      Consultant @relation(fields: [consultantEmail], references: [email])
  Project         Project    @relation(fields: [projectId], references: [id])

  @@id([consultantEmail, projectId])
}

model Project {
  id           String        @id @default(cuid())
  name         String
  clientUEN    String
  locations    Json
  createdAt    DateTime      @default(now())
  endDate      DateTime
  startDate    DateTime
  employmentBy MCICompany
  status       ProjectStatus @default(ACTIVE)
  Assign       Assign[]
  Manage       Manage[]
  Client       Client        @relation(fields: [clientUEN], references: [UEN])
  Shift        Shift[]
}

model Shift {
  id          String       @id @default(cuid())
  headcount   Int
  day         DayOfWeek
  endTime     DateTime
  projectId   String
  shiftNumber Int
  startTime   DateTime
  Attendance  Attendance[]
  Project     Project      @relation(fields: [projectId], references: [id])

  @@unique([projectId, day, shiftNumber, startTime, endTime])
}

model Session {
  sid    String   @id(map: "session_pkey") @db.VarChar
  sess   Json     @db.Json
  expire DateTime @db.Timestamp(6)

  @@index([expire], map: "IDX_session_expire")
}

model User {
  username  String    @id
  hash      String
  Candidate Candidate @relation(fields: [username], references: [nric])
}

enum AttendanceStatus {
  PRESENT
  NO_SHOW
  MC
  FULL_DAY_LEAVE
  HALF_DAY_LEAVE
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum EmploymentStatus {
  ACTIVE
  TERMINATED
}

enum ProjectStatus {
  ACTIVE
  EXPIRED
  DELETED
}

enum Role {
  CLIENT_HOLDER
  CANDIDATE_HOLDER
}

enum MCICompany {
  MCI_CAREER_SERVICES
  MCI_OUTSOURCING
}
